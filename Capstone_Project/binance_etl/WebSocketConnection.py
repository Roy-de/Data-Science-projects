import json
import time
from datetime import datetime

from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import websocket


class WebSocketConnection:
    ticker = "btcusdt"
    timeframe = "miniTicker"

    def converttime(data):
        timestamp_seconds = data['E'] // 1000
        return datetime.fromtimestamp(timestamp_seconds)

    def on_message(connection,message):
        session = connect_to_datastax()
        try:
            data = json.loads(message)["data"]
            eventtime = WebSocketConnection.converttime(data)
            eventtime = time.time()
            open_price = float(data['o'])
            high_price = float(data['h'])
            low_price = float(data['l'])
            close_price = float(data['c'])
            print(type(eventtime), "\t", eventtime, "\t",
                  round(float(data['h']), 2), "\t", round(float(data['l']), 2), "\t",
                  round(float(data['c']), 2))
            try:
                print("Inserting data")
                query = f"INSERT INTO btcusd.btcusd_time_series (timestamp, open_price, high_price, low_price, close_price) VALUES ({eventtime}, {open_price}, {high_price}, {low_price}, {close_price})"
                session.execute(query)
            except Exception as e:
                print(f"Error executing Cassandra query: {e}")

        except Exception as e:
            print(f"Error processing message: {e}")


class Binance:
    binance_uri = "wss://stream.binance.com:9443/stream?streams="

    def __init__(self, ticker, timeframe):
        self.ticker = ticker
        self.timeframe = timeframe

    def ticker_data(self):
        url = f"{self.binance_uri}{self.ticker}@{self.timeframe}"
        return url


if __name__ == "__main__":

    def connect_to_datastax():
        # This secure connect bundle is autogenerated when you download your SCB,
        # if yours is different update the file name below
        cloud_config = {
            'secure_connect_bundle': 'secure-connect-crypto.zip'
        }

        # This token JSON file is autogenerated when you download your token,
        # if yours is different update the file name below
        with open("crypto-token.json") as f:
            secrets = json.load(f)

        CLIENT_ID = secrets["clientId"]
        CLIENT_SECRET = secrets["secret"]

        auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
        cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
        session = cluster.connect()
        session.execute(f"CREATE TABLE IF NOT EXISTS btcusd.btcusd_time_series "
                        f"(timestamp DOUBLE PRIMARY KEY,open_price DOUBLE,high_price DOUBLE,"
                        f"low_price DOUBLE,close_price DOUBLE)")
        print("success")
        return session

    connect_to_datastax()
    try:
        ticker_instance = Binance(ticker=WebSocketConnection.ticker, timeframe=WebSocketConnection.timeframe)
        connection = websocket.WebSocketApp(ticker_instance.ticker_data(),
                                            on_message=WebSocketConnection.on_message)
        print("Date \t  :Open\t\t\t:High\t\t\t:low\t\t:close")
        connection.run_forever()
    except websocket.WebSocketConnectionClosedException as e:
        print(f"Error establishing a connection: {e}")
